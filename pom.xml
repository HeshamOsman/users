<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.3.3.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.gamary</groupId>
	<artifactId>orange</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>orange</name>
	<description>Orange Task</description>

	<properties>
		<java.version>11</java.version>
		<hibernate-validator.version>6.1.5.Final</hibernate-validator.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>org.junit.vintage</groupId>
					<artifactId>junit-vintage-engine</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.hibernate.validator</groupId>
			<artifactId>hibernate-validator</artifactId>
			<version>${hibernate-validator.version}</version>
		</dependency>

	</dependencies>


	<build>
		<plugins>
			<plugin>
				2
				<groupId>org.codehaus.mojo</groupId>
				3
				<artifactId>exec-maven-plugin</artifactId>
				4
				<version>1.6.0</version>
				5
				<executions>
					6
					<!-- Remove existing image from local repo -->
					7
					<execution>
						8
						<id>docker-clean</id>
						9
						<phase>install</phase>
						10
						<goals>
							11
							<goal>exec</goal>
							12
						</goals>
						13
						<configuration>
							14
							<executable>docker</executable>
							15
							<workingDirectory>${project.basedir}</workingDirectory>
							16
							<arguments>
								17
								<argument>rmi</argument>
								18
								<argument>${project.groupId}/${project.artifactId}:${project.version}</argument>
								19
							</arguments>
							20
						</configuration>
						21
					</execution>
					22

					23
					<!--
                24
                      Create new docker image using Dockerfile which must be present in current working directory.
                25
                      Tag the image using maven project version information.
                26
                    -->
					27
					<execution>
						28
						<id>docker-build</id>
						29
						<phase>install</phase>
						30
						<goals>
							31
							<goal>exec</goal>
							32
						</goals>
						33
						<configuration>
							34
							<executable>docker</executable>
							35
							<workingDirectory>${project.basedir}</workingDirectory>
							36
							<arguments>
								37
								<argument>build</argument>
								38
								<argument>-t</argument>
								39
								<argument>${project.groupId}/${project.artifactId}:${project.version}</argument>
								40
								<argument>.</argument>
								41
							</arguments>
							42
						</configuration>
						43
					</execution>
					44

					45
					<!-- Login and Push the image to a docker repo. -->
					46
					<execution>
						47
						<id>docker-login</id>
						48
						<phase>deploy</phase>
						49
						<goals>
							50
							<goal>exec</goal>
							51
						</goals>
						52
						<configuration>
							53
							<executable>docker</executable>
							54
							<workingDirectory>${project.basedir}</workingDirectory>
							55
							<arguments>
								56
								<argument>login</argument>
								57
								<argument>-u</argument>
								<argument>${docker.user}</argument>
								<argument>-p</argument>
								<argument>${docker.password}</argument>
								<argument>${docker.url}</argument>
							</arguments>
						</configuration>
					</execution>
					<execution>
						<id>docker-push</id>
						<phase>deploy</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>docker</executable>
							<workingDirectory>${project.basedir}</workingDirectory>
							<arguments>
								<argument>push</argument>
								<argument>${project.groupId}/${project.artifactId}:${project.version}</argument>
							</arguments>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>
